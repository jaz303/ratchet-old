[ ] if-statement parsing
[ ] function definitions - default parameter parsing
[ ] string data type, parsing
[ ] unary operator representation and parsing (!, -)
[ ] add comparison operators: =, <, >, <=, >= (parsing, precedence)

[ ] proper compiler/VM
	- symbol table, scope resolution
	- jump table for interpreter (macro-defined)

[ ] ensure all operations on val_t are encapsulated

---

- GC
- closures
- tasks (yield, spawn)
- arrays
- dictionaries
- module system


- object system
	- host-defined objects only for now
	- redefine function calls in terms of self sends
- tagged value repr via NaN-packing
- classes
- operator overloading
- XML parsing; data language
- channels
- threadpool
- blocks

- immutable datastructures
- UTF8
- stdlib
	- file IO
	- string
	- collections
	- network

- buffers
- streams

Ideas:
	- hot module reloading
	- modules can be instanced (have initialize function)
	- to use threads, "spawn thread Module(1,2,3)"
	- private class extensions (like JS symbols)
	- class extension methods
	- object object system (optional)
	- embedded grammars

Done
----

- while
- function call AST
- native function repr
- native function calls